.single-post {
  justify-content: center;
}
.single-post__header {
  text-align: center;
}
@media (min-width: 300px) {
  .single-post__header {
    margin-bottom: 0.5rem;
  }
}
@media (min-width: 620px) {
  .single-post__header {
    margin-bottom: 0.5rem;
  }
}
@media (min-width: 768px) {
  .single-post__header {
    margin-bottom: 1rem;
  }
}
@media (min-width: 992px) {
  .single-post__header {
    margin-bottom: 1rem;
  }
}
@media (min-width: 1200px) {
  .single-post__header {
    margin-bottom: 1.5rem;
  }
}
@media (min-width: 1400px) {
  .single-post__header {
    margin-bottom: 1.5rem;
  }
}
@media (min-width: 992px) {
  .single-post__header__title h1 {
    margin-bottom: 1rem;
  }
}
.single-post__image {
  height: 25rem;
}
@media (min-width: 300px) {
  .single-post__image {
    margin-bottom: 0.5rem;
  }
}
@media (min-width: 620px) {
  .single-post__image {
    margin-bottom: 0.5rem;
  }
}
@media (min-width: 768px) {
  .single-post__image {
    margin-bottom: 1rem;
  }
}
@media (min-width: 992px) {
  .single-post__image {
    margin-bottom: 1rem;
  }
}
@media (min-width: 1200px) {
  .single-post__image {
    margin-bottom: 1.5rem;
  }
}
@media (min-width: 1400px) {
  .single-post__image {
    margin-bottom: 1.5rem;
  }
}
.single-post__image img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  object-position: center center;
}
.single-post__image__caption {
  padding-top: 0.25rem;
  text-align: center;
  font-size: 0.833rem;
  color: rgba(27, 16, 99, 0.8);
}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
